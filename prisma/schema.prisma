generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum PlanName {
    FREE
    BASIC
    PREMIUM
}

enum DiscountType {
    FIRST_TIME
    PROMOTION
    CHRISTMAS
    NEW_YEAR
    HALLOWEEN
    PARTIES
    OTHER
}


model Plan {
    id              String   @id @default(uuid())
    name            PlanName
    maxUsers        Int
    maxRoles        Int
    maxAttributes   Int

    monthlyPrice    Float
    yearlyPrice     Float
    discount        Float?  @default(0)
    discountType    DiscountType? 

    apiUsers    User[]

    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    version     Int         @default(0)
}

model User {
    id          String      @id @default(uuid())
    email       String
    nickname    String?
    name        String?
    birthdate   DateTime?
    isActive    Boolean     @default(true)
    avatar      String?
    phone       String?

    planId      String?
    plan        Plan?       @relation(fields: [planId], references: [id])

    apiUserId   String?
    apiUser     User?       @relation("ApiUserHierarchy", fields: [apiUserId], references: [id], onDelete: Cascade)
    users       User[]      @relation("ApiUserHierarchy")
    roles       Role[]
    userPermissions UserPermission[]
    secrets     Secret[]
    pwdAdmins   PwdAdmin[]
    attributes  UserAttribute[]
    attributeValues UserAttributeValue[]
    userRoles   UserRole[]
    permissions Permission[]

    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    version     Int       @default(0)
    isVerified  Boolean   @default(false)

    @@index([isActive, apiUserId, email])
    @@unique([email, apiUserId])
    @@unique([nickname, apiUserId])
}

model Role {
    id          String    @id @default(uuid())
    name        String
    description String?
    isActive   Boolean  @default(true)

    userId   String?
    user     User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

    userRoles   UserRole[]
    rolePermissions RolePermission[]

    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    version     Int       @default(0)

    @@unique([userId, name])
    @@index([userId, name])
}

model UserRole {
    id         String   @id @default(uuid())

    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String

    role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
    roleId     String

    createdAt DateTime @default(now())
    updatedAt DateTime? @updatedAt

    @@index([userId, roleId])
    @@unique([userId, roleId])
}


model Permission {
    id String @id @default(uuid())
    name String 
    description String?
    isActive   Boolean  @default(true)

    userId   String
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    rolePermissions RolePermission[]
    userPermissions UserPermission[]

    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    version     Int         @default(0)

    @@unique([name])
    @@index([name, userId, isActive])
}


model RolePermission {
    id String @id @default(uuid())
    role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
    roleId String

    permissionId String
    permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([roleId, permissionId])
}


model UserPermission {
    id String @id @default(uuid())
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    permissionId String
    permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId, permissionId])
    @@unique([userId, permissionId])
}

model Secret {
    id              String      @id @default(uuid())
    name            String
    secret          String      @unique
    expiresAt       DateTime?
    willExpireAt    DateTime?
    isActive        Boolean     @default(true)

    apiUserId       String
    apiUser         User        @relation(fields: [apiUserId], references: [id], onDelete: Cascade)

    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
    version         Int         @default(0)

    @@index([apiUserId, isActive])
}

enum AttributeType {
    STRING
    NUMBER
    BOOLEAN
    DECIMAL
    LIST
    JSON
    DATETIME
    UUID
}

model UserAttribute {
    id          String    @id @default(uuid())
    key         String
    defaultValue Json?
    isActive    Boolean   @default(true)

    type        AttributeType

    min         Float?
    max         Float?
    minLength   Int?
    maxLength   Int?
    pattern     String?
    required    Boolean   @default(false)
    maxDate     DateTime?
    minDate     DateTime?

    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String

    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    version     Int       @default(0)

    values      UserAttributeValue[] 

    @@index([userId])
    @@unique([userId, key])
}

model UserAttributeValue {

    id String @id @default(uuid())
    value Json?

    userAttribute UserAttribute @relation(fields: [userAttributeId], references: [id], onDelete: Cascade)
    userAttributeId String

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    version     Int       @default(0)

    @@index([userAttributeId, userId])
    @@unique([userAttributeId, userId])
}


model PwdAdmin {
    id              String   @id @default(uuid())
    password        String
    isActive        Boolean  @default(true)
    expiresAt       DateTime?
    willExpireAt    DateTime?
    isGuardian      Boolean  @default(false)
    alertDay        Int?
    howOften        Int?

    user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId          String

    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    version         Int      @default(0)

    @@index([userId])
}


model AuditLog {
    id        String   @id @default(uuid())
    action    String
    model     String
    recordId  String?
    userId    String?
    details   Json?
    timestamp DateTime @default(now())
}

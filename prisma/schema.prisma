// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id           String       @id @default(uuid())
    email        String       @unique
    nickname     String?      @unique
    name         String?
    birthdate    DateTime?
    isDeleted    Boolean      @default(false)
    isActive     Boolean      @default(true)
    avatar       String?
    phone        String?

    googleId     String?
    microsoftId  String?
    facebookId   String?
    githubId     String?
    appleId      String?
    otherId      String?

    // Relación para identificar una cuenta API (padre) y sus usuarios asociados (hijos)
    // Si el usuario es creado por una cuenta API, se almacena el id de esa cuenta en apiUserId.
    apiUserId    String?
    apiUser      User?        @relation("ApiUserHierarchy", fields: [apiUserId], references: [id])
    users        User[]       @relation("ApiUserHierarchy")
    roles        Role[]       // Relación inversa con Role (si una cuenta API tiene roles específicos)
    secrets      Secret[]
    pwdAdmins    PwdAdmin[]
    attributes   UserAttribute[]
    userRoles    UserRole[]

    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt

    @@index([isActive, isDeleted, apiUserId])
}

model Role {
    id          String    @id @default(uuid())
    name        String
    description String?

    // Opcional: si el rol es específico para una cuenta API, se asocia a esa cuenta.
    userId   String?
    user     User?     @relation(fields: [userId], references: [id])

    userRoles   UserRole[]

    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@unique([userId, name])
    @@index([userId])
}

model UserRole {
    id         String   @id @default(uuid())
    isActive   Boolean  @default(true)

    user       User     @relation(fields: [userId], references: [id])
    userId     String

    role       Role     @relation(fields: [roleId], references: [id])
    roleId     String

    @@index([userId, roleId, isActive])
    @@unique([userId, roleId])
}

model Secret {
    id         String   @id @default(uuid())
    secret     String   @unique// El secreto para la cuenta API
    expiresAt  DateTime?
    isActive   Boolean  @default(true)

    // Este secreto se asocia a la cuenta API (es decir, a un User que tenga asignado el rol "API")
    apiUserId  String
    apiUser    User     @relation(fields: [apiUserId], references: [id])

    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@index([apiUserId, isActive])
}

enum AttributeType {
    STRING
    NUMBER
    BOOLEAN
    DECIMAL
    LIST
    JSON
    DATETIME
    UUID
}

model UserAttribute {
    id          String    @id @default(uuid())
    key         String    // Nombre del atributo (ej.: "points")
    value       Json?      // Valor del atributo (ej.: "100")
    defaultValue Json?      // Valor por defecto (ej.: "100")
    isActive    Boolean   @default(true)

    type        AttributeType  // Tipo de dato (ej.: STRING, NUMBER, BOOLEAN, DECIMAL, LIST)

    min         Float?    // Valor mínimo permitido (para números y decimales)
    max         Float?    // Valor máximo permitido (para números y decimales)
    minLength   Int?      // Longitud mínima (para strings y listas)
    maxLength   Int?      // Longitud máxima (para strings y listas)
    pattern     String?   // Expresión regular para validaciones (opcional)
    required    Boolean   @default(false) // Indica si es obligatorio
    maxDate     DateTime?
    minDate     DateTime?

    user        User      @relation(fields: [userId], references: [id])
    userId      String

    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@index([userId])
    @@unique([userId, key])
}

model PwdAdmin {
    id           String   @id @default(uuid())
    password     String   // Hash de la contraseña histórica
    expiresAt    DateTime?
    isActive     Boolean  @default(true)
    lastUsedAt   DateTime?
    mustChange   Boolean  @default(false)

    user         User     @relation(fields: [userId], references: [id])
    userId       String

    createdAt    DateTime @default(now())

    @@index([userId])
    @@unique([userId, password])
}

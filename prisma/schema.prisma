// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum PlanName {
    FREE
    BASIC
    PREMIUM
}

enum DiscountType {
    FIRST_TIME
    PROMOTION
    CHRISTMAS
    NEW_YEAR
    HALLOWEEN
    PARTIES
    OTHER
}


model Plan {
    id              String   @id @default(uuid())
    name            PlanName
    maxUsers        Int      // Máximo de usuarios permitidos (puede ser -1 para ilimitado)
    maxRoles        Int      // Máximo de roles permitidos
    maxAttributes   Int

    monthlyPrice    Float    // Precio mensual
    yearlyPrice     Float    // Precio anual
    discount        Float?  @default(0) // Porcentaje de descuento (opcional)
    discountType    DiscountType?  // Tipo/Motivo del descuento (opcional)

    // Relación con User (solo para cuentas API)
    apiUsers    User[]   // Un plan puede estar asociado a múltiples cuentas API

    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    version     Int         @default(0)
}

model User {
    id          String      @id @default(uuid())
    email       String
    nickname    String?
    name        String?
    birthdate   DateTime?
    isActive    Boolean     @default(true)
    avatar      String?
    phone       String?

    planId      String?      // ID del plan asociado (opcional)
    plan        Plan?       @relation(fields: [planId], references: [id])

    // Relación para identificar una cuenta API (padre) y sus usuarios asociados (hijos)
    // Si el usuario es creado por una cuenta API, se almacena el id de esa cuenta en apiUserId.
    apiUserId   String?
    apiUser     User?       @relation("ApiUserHierarchy", fields: [apiUserId], references: [id], onDelete: Cascade)
    users       User[]      @relation("ApiUserHierarchy")
    roles       Role[]
    userPermissions UserPermission[]
    secrets     Secret[]
    pwdAdmins   PwdAdmin[]
    attributes  UserAttribute[]
    attributeValues UserAttributeValue[]
    userRoles   UserRole[]

    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    version     Int       @default(0)
    isVerified  Boolean   @default(false)


    @@index([isActive, apiUserId, email])
    @@unique([email, nickname, apiUserId])
}

model Role {
    id          String    @id @default(uuid())
    name        String
    description String?

    // Opcional: si el rol es específico para una cuenta API, se asocia a esa cuenta.
    userId   String?
    user     User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

    userRoles   UserRole[]
    rolePermissions RolePermission[]

    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    version     Int       @default(0)

    @@unique([userId, name])
    @@index([userId, name])
}

model UserRole {
    id         String   @id @default(uuid())
    isActive   Boolean  @default(true)

    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String

    role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
    roleId     String

    createdAt DateTime @default(now())
    updatedAt DateTime? @updatedAt

    @@index([userId, roleId, isActive])
    @@unique([userId, roleId])
}


model Permission {
    id String @id @default(uuid())
    name String 
    description String?
    rolePermissions RolePermission[]
    userPermissions UserPermission[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    @@unique([name])
    @@index([name])
}


model RolePermission {
    id String @id @default(uuid())
    role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
    roleId String
    permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
    permissionId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    @@unique([roleId, permissionId])
}


model UserPermission {
    id String @id @default(uuid())
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
    permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
    permissionId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId, permissionId])
    @@unique([userId, permissionId])
}

model Secret {
    id              String      @id @default(uuid())
    secret          String      @unique
    expiresAt       DateTime?
    willExpireAt    DateTime?
    isActive        Boolean     @default(true)

    apiUserId       String
    apiUser         User        @relation(fields: [apiUserId], references: [id], onDelete: Cascade)

    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
    version         Int         @default(0)

    @@index([apiUserId, isActive])
}

enum AttributeType {
    STRING
    NUMBER
    BOOLEAN
    DECIMAL
    LIST
    JSON
    DATETIME
    UUID
}

model UserAttribute {
    id          String    @id @default(uuid())
    key         String    // Nombre del atributo (ej.: "points")
    defaultValue Json?      // Valor por defecto (ej.: "100")
    isActive    Boolean   @default(true)

    type        AttributeType  // Tipo de dato (ej.: STRING, NUMBER, BOOLEAN, DECIMAL, LIST)

    min         Float?    // Valor mínimo permitido (para números y decimales)
    max         Float?    // Valor máximo permitido (para números y decimales)
    minLength   Int?      // Longitud mínima (para strings y listas)
    maxLength   Int?      // Longitud máxima (para strings y listas)
    pattern     String?   // Expresión regular para validaciones (opcional)
    required    Boolean   @default(false) // Indica si es obligatorio
    maxDate     DateTime?
    minDate     DateTime?

    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String

    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    version     Int       @default(0)

    values      UserAttributeValue[] 

    @@index([userId])
    @@unique([userId, key])
}

model UserAttributeValue {

    id String @id @default(uuid())
    value Json?

    userAttribute UserAttribute @relation(fields: [userAttributeId], references: [id], onDelete: Cascade)
    userAttributeId String

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    version     Int       @default(0)

    @@index([userAttributeId, userId])
}

model PwdAdmin {
    id              String   @id @default(uuid())
    password        String
    isActive        Boolean  @default(true)
    expiresAt       DateTime?
    willExpireAt    DateTime?
    isGuardian      Boolean  @default(false)
    version         Int      @default(0)
    alertDay        Int?
    howOften        Int?

    user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId          String

    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    @@index([userId])
}


model AuditLog {
    id        String   @id @default(uuid())
    action    String
    model     String
    recordId  String?
    userId    String?
    details   Json?
    timestamp DateTime @default(now())
}

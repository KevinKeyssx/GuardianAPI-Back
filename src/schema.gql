# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Role {
  id: ID!
  name: String!
  description: String
  userId: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserRole {
  """Example field (placeholder)"""
  id: ID!

  """Example field (placeholder)"""
  user: User!

  """Example field (placeholder)"""
  role: Role!
}

type SecretEntity {
  id: ID!
  expiresAt: DateTime
  willExpireAt: DateTime
  isActive: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PwdAdmin {
  id: ID!
  willExpireAt: DateTime
  isActive: Boolean!
  isGuardian: Boolean!
  alertDay: Int
  howOften: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type User {
  id: ID!
  email: String!
  nickname: String
  name: String
  birthdate: DateTime
  phone: String
  isActive: Boolean!
  avatar: String
  userRoles: [UserRole!]
  createdAt: DateTime!
  updatedAt: DateTime!
  secrets: [SecretEntity!]
  pwdAdmins: [PwdAdmin!]
}

type GenerateSecretResponse {
  secret: String!
  secretData: SecretEntity!
}

type UserResponse {
  id: ID!
  email: String!
  nickname: String
  name: String
  birthdate: DateTime
  phone: String
  isActive: Boolean!
  avatar: String
  userRoles: [UserRole!]
  createdAt: DateTime!
  updatedAt: DateTime!
  secret: SecretEntity
  pwdAdmin: PwdAdmin
  roles(search: String, page: Int = 0, each: Int = 10, field: String = "name", orderBy: String = "asc"): [Role!]!
  total: Float!
  attributes(keys: [String!]): [UserAttribute!]!
}

type UserAttribute {
  key: String!
  defaultValue: JSON
  isActive: Boolean!
  type: AttributeType!
  min: Float
  max: Float
  minLength: Float
  maxLength: Float
  pattern: String
  required: Boolean
  maxDate: DateTime
  minDate: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""Tipos posibles de atributos"""
enum AttributeType {
  STRING
  NUMBER
  BOOLEAN
  DECIMAL
  LIST
  JSON
  DATETIME
  UUID
}

type ValidateUser {
  valid: Boolean!
  user: UserResponse
  token: String
  message: String!
  errorCode: String
}

type AssignUsersRolesResponse {
  success: [UserRole!]
  errors: [ErrorDetail!]
}

type ErrorDetail {
  userId: String
  roleId: String
  error: String!
}

type UserAttributeValue {
  """Id of the user attribute value"""
  id: ID!

  """User of the user attribute value"""
  user: User!

  """User attribute of the user attribute value"""
  userAttribute: UserAttribute!

  """Value of the user attribute value"""
  value: JSON!

  """Created at of the user attribute value"""
  createdAt: DateTime!

  """Updated at of the user attribute value"""
  updatedAt: DateTime!
}

type Query {
  secret: [SecretEntity!]!
  users(search: String, page: Int = 0, each: Int = 10, field: String = "name", orderBy: String = "asc"): [UserResponse!]!
  user(id: ID): UserResponse!
  validateToken(token: String!, refresh: Boolean = false): ValidateUser!
  roles(page: Int = 0, each: Int = 10, field: String = "name", orderBy: String = "asc", search: String): [Role!]!
  role(id: ID!): Role!
  userAttributes(keys: [String!]): [UserAttribute!]!
  userAttributesByUserId(userId: ID!, keys: [String!]): [UserAttribute!]!
  userAttribute(id: ID!): UserAttribute!
  userAttributeValues: [UserAttributeValue!]!
  userAttributeValue(id: ID!): UserAttributeValue!
}

type Mutation {
  generateSecret(createSecretInput: CreateSecretInput!): GenerateSecretResponse!
  expiresAtSecret(updateSecretInput: UpdateSecretInput!): SecretEntity!
  removeSecret(id: String!): Boolean!
  updateUser(updateUserInput: UpdateUserInput!): UserResponse!
  removeUser(id: ID): Boolean!
  createRole(createRoleInput: CreateRoleInput!): Role!
  updateRole(updateRoleInput: UpdateRoleInput!): Role!
  removeRole(id: ID!): Role!
  createUserAttribute(createUserAttributeInput: CreateUserAttributeInput!): UserAttribute!
  updateUserAttribute(updateUserAttributeInput: UpdateUserAttributeInput!): UserAttribute!
  removeUserAttribute(id: ID!): UserAttribute!
  activeGuardian(updatePwdAdminInput: UpdatePwdAdminInput!): PwdAdmin!
  changePassword(updatePwdInput: UpdatePwdInput!): PwdAdmin!
  assignRoleToUser(roleId: ID!, userId: ID!): UserRole!
  asignManyRolesToUsers(asignRolesUsersInput: AsignUsersRolesInput!): AssignUsersRolesResponse!
  removeUserRole(id: ID!): UserRole!
  removeManyUserRoles(ids: [ID!]!): AssignUsersRolesResponse!
  createUserAttributeValue(createUserAttributeValueInput: CreateUserAttributeValueInput!): UserAttributeValue!
  updateUserAttributeValue(id: ID!, value: ValueBasicInput!): UserAttributeValue!
  updateUserAttributeValueByApiUser(id: ID!, value: ValueBasicInput!): UserAttributeValue!
}

input CreateSecretInput {
  willExpireAt: DateTime
}

input UpdateSecretInput {
  willExpireAt: DateTime!
  id: String!
}

input UpdateUserInput {
  id: ID!
  email: String
  nickname: String
  name: String
  phone: String
  birthdate: DateTime
  avatar: String
  googleId: String
  microsoftId: String
  facebookId: String
  githubId: String
  appleId: String
  otherId: String
  isActive: Boolean
}

input CreateRoleInput {
  name: String!
  description: String
}

input UpdateRoleInput {
  name: String
  description: String
  id: ID!
}

input CreateUserAttributeInput {
  key: String!
  defaultValue: JSON
  isActive: Boolean = true
  type: AttributeType!
  min: Float
  max: Float
  minLength: Float
  maxLength: Float
  pattern: String
  required: Boolean = false
  maxDate: String
  minDate: String
}

input UpdateUserAttributeInput {
  key: String
  defaultValue: JSON
  isActive: Boolean = true
  type: AttributeType
  min: Float
  max: Float
  minLength: Float
  maxLength: Float
  pattern: String
  required: Boolean = false
  maxDate: String
  minDate: String
  id: ID!
  value: JSON
}

input UpdatePwdAdminInput {
  alertDay: Int!
  howOften: Int!
}

input UpdatePwdInput {
  currentPassword: String!
  newPassword: String!
}

input AsignUsersRolesInput {
  userIds: [ID!]!
  roleIds: [ID!]!
}

input CreateUserAttributeValueInput {
  value: JSON
  userId: ID!
  userAttributeId: ID!
}

input ValueBasicInput {
  value: JSON
}